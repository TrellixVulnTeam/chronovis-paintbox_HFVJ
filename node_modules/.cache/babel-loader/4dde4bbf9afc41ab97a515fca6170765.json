{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/chronovis/src/components/Hands.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useEffect, useRef } from 'react';\nimport HandsFree from 'handsfree'; // import EventDispatcher from 'react-event-dispatcher';\n// import hands from '@mediapipe/hands';\n//https://handsfree.js.org\n//IMPORTANT: handsfree.js source code has been edited to turn pinchScroll into clicker\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Hands(props) {\n  _s();\n\n  //init\n  const ref = useRef(); //creates reference for *this* render\n  //only re-renders on new ref. without useRef and useMemo, a new handsFree gets created on every render\n\n  const handsFree = useMemo(() => new HandsFree({\n    hands: {\n      enabled: true,\n      maxNumHands: 1\n    }\n  }), [ref]);\n  handsFree.enablePlugins('browser'); //handsFree.plugin.palmPointers.offset = {x: -200, y: -200}\n  //only runs on component mount & dismount\n\n  useEffect(() => {\n    console.log(ref);\n\n    if (ref && ref.current) {\n      handsFree.start(() => {\n        handsFree.pause();\n      }); //initializes loop but pauses it instantly\n\n      ref.current.focus();\n    } // console.log(handsFree.pause);\n    //stop webcam on unmount\n\n\n    return () => handsFree.stop();\n  }, []);\n\n  const handleClick = e => {\n    e.preventDefault();\n\n    if (!props.enabled) {\n      handsFree.unpause();\n      props.setEnabled(true);\n      console.log(handsFree.isLooping);\n    } else {\n      handsFree.pause();\n      console.log(handsFree.isLooping);\n      props.setEnabled(false);\n    }\n  };\n\n  const handleKeyDown = e => {\n    console.log(e);\n  };\n  /*\n   - disable pinch scroll\n  - if thumb and index pinched on any hand, dispatch click event\n   pinch start:\n  - create click event starting w current point\n  - elementFromPoint(curPinch[1][0].x, curPinch[1][0].y)\n   pinch held:\n  - create mouse move events\n   pinch released:\n  - create mouse up event\n   data.hands.pinchState[0][0] -> gets state of LH index finger\n  can be either \"start\", \"held\", \"released\"\n  handsFree.on(handsfree-finger-pinched-start-0)\n  handsFree.on(handsfree-finger-pinched-held-0)\n  handsFree.on(handsfree-finger-pinched-released-0)\n    */\n\n  /*\n    TODO:\n    - draw palm Positions\n      - shrink for click\n      - something for drag (oblong?)\n    - add \"click\" plugin\n      - create plugin for \"horns\" hand gesture\n      - on horns, new MouseEvent\n    - add \"pause\" plugin\n      - on fist, pause/stop handsFree\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    onKeyDown: handleKeyDown,\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: props.enabled ? \"disable hands\" : \"enable hands\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Hands, \"sEGCOFuwqOI4bFOBP+jy4xyjtRY=\");\n\n_c = Hands;\n;\nexport default Hands;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hands\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/chronovis/src/components/Hands.js"],"names":["React","useMemo","useEffect","useRef","HandsFree","Hands","props","ref","handsFree","hands","enabled","maxNumHands","enablePlugins","console","log","current","start","pause","focus","stop","handleClick","e","preventDefault","unpause","setEnabled","isLooping","handleKeyDown"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,OAAf,EAAwBC,SAAxB,EAAmCC,MAAnC,QAAgD,OAAhD;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CACA;AACA;AAEA;AACA;;;;AAGA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACpB;AACA,QAAMC,GAAG,GAAGJ,MAAM,EAAlB,CAFoB,CAEE;AACtB;;AACA,QAAMK,SAAS,GAAGP,OAAO,CAAC,MACxB,IAAIG,SAAJ,CAAc;AACZK,IAAAA,KAAK,EAAC;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,WAAW,EAAE;AAFT;AADM,GAAd,CADuB,EAMnB,CAACJ,GAAD,CANmB,CAAzB;AAOAC,EAAAA,SAAS,CAACI,aAAV,CAAwB,SAAxB,EAXoB,CAYpB;AAEF;;AACEV,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;;AACA,QAAIA,GAAG,IAAIA,GAAG,CAACQ,OAAf,EAAwB;AACtBP,MAAAA,SAAS,CAACQ,KAAV,CAAgB,MAAI;AAACR,QAAAA,SAAS,CAACS,KAAV;AAAkB,OAAvC,EADsB,CACoB;;AAC1CV,MAAAA,GAAG,CAACQ,OAAJ,CAAYG,KAAZ;AACD,KALa,CAMd;AACA;;;AACA,WAAO,MAAMV,SAAS,CAACW,IAAV,EAAb;AACD,GATQ,EASN,EATM,CAAT;;AAWA,QAAMC,WAAW,GAAIC,CAAD,IAAO;AACzBA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAAChB,KAAK,CAACI,OAAX,EAAmB;AACjBF,MAAAA,SAAS,CAACe,OAAV;AACAjB,MAAAA,KAAK,CAACkB,UAAN,CAAiB,IAAjB;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYN,SAAS,CAACiB,SAAtB;AAED,KALD,MAKO;AACLjB,MAAAA,SAAS,CAACS,KAAV;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYN,SAAS,CAACiB,SAAtB;AACAnB,MAAAA,KAAK,CAACkB,UAAN,CAAiB,KAAjB;AACD;AACF,GAZD;;AAcA,QAAME,aAAa,GAAIL,CAAD,IAAO;AAC3BR,IAAAA,OAAO,CAACC,GAAR,CAAYO,CAAZ;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIE,sBACE;AAAK,IAAA,GAAG,EAAEd,GAAV;AAAe,IAAA,SAAS,EAAEmB,aAA1B;AAAA,2BAEE;AAAQ,MAAA,OAAO,EAAEN,WAAjB;AAAA,gBACGd,KAAK,CAACI,OAAN,GAAc,eAAd,GAA8B;AADjC;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GA3FQL,K;;KAAAA,K;AA2FR;AAED,eAAeA,KAAf","sourcesContent":["import React, {useMemo, useEffect, useRef} from 'react';\nimport HandsFree from 'handsfree';\n// import EventDispatcher from 'react-event-dispatcher';\n// import hands from '@mediapipe/hands';\n\n//https://handsfree.js.org\n//IMPORTANT: handsfree.js source code has been edited to turn pinchScroll into clicker\n\n\nfunction Hands(props) {\n  //init\n  const ref = useRef(); //creates reference for *this* render\n  //only re-renders on new ref. without useRef and useMemo, a new handsFree gets created on every render\n  const handsFree = useMemo(() =>\n    new HandsFree({\n      hands:{\n        enabled: true,\n        maxNumHands: 1\n      }\n    }), [ref]);\n  handsFree.enablePlugins('browser');\n  //handsFree.plugin.palmPointers.offset = {x: -200, y: -200}\n\n//only runs on component mount & dismount\n  useEffect(() => {\n    console.log(ref);\n    if (ref && ref.current) {\n      handsFree.start(()=>{handsFree.pause()}); //initializes loop but pauses it instantly\n      ref.current.focus();\n    }\n    // console.log(handsFree.pause);\n    //stop webcam on unmount\n    return () => handsFree.stop();\n  }, []);\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    if (!props.enabled){\n      handsFree.unpause();\n      props.setEnabled(true);\n      console.log(handsFree.isLooping);\n\n    } else {\n      handsFree.pause()\n      console.log(handsFree.isLooping);\n      props.setEnabled(false);\n    }\n  }\n\n  const handleKeyDown = (e) => {\n    console.log(e)\n  }\n\n  /*\n\n  - disable pinch scroll\n  - if thumb and index pinched on any hand, dispatch click event\n\n  pinch start:\n  - create click event starting w current point\n  - elementFromPoint(curPinch[1][0].x, curPinch[1][0].y)\n\n  pinch held:\n  - create mouse move events\n\n  pinch released:\n  - create mouse up event\n\n  data.hands.pinchState[0][0] -> gets state of LH index finger\n  can be either \"start\", \"held\", \"released\"\n  handsFree.on(handsfree-finger-pinched-start-0)\n  handsFree.on(handsfree-finger-pinched-held-0)\n  handsFree.on(handsfree-finger-pinched-released-0)\n\n\n  */\n\n\n  /*\n    TODO:\n    - draw palm Positions\n      - shrink for click\n      - something for drag (oblong?)\n    - add \"click\" plugin\n      - create plugin for \"horns\" hand gesture\n      - on horns, new MouseEvent\n    - add \"pause\" plugin\n      - on fist, pause/stop handsFree\n\n  */\n\n\n  return (\n    <div ref={ref} onKeyDown={handleKeyDown}>\n      {/*<HandsButton handleClick={handleClick} />*/}\n      <button onClick={handleClick}>\n        {props.enabled?\"disable hands\":\"enable hands\"}\n      </button>\n    </div>\n  )\n};\n\nexport default Hands;\n"]},"metadata":{},"sourceType":"module"}