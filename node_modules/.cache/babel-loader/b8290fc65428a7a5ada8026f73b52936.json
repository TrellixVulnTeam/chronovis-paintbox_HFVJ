{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/chronovis/src/components/Hands.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useEffect, useRef } from 'react';\nimport HandsFree from 'handsfree'; // import EventDispatcher from 'react-event-dispatcher';\n// import hands from '@mediapipe/hands';\n//https://handsfree.js.org\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction initHandsFree() {//\n}\n\nfunction Hands(props) {\n  _s();\n\n  //init\n  const ref = useRef(); //creates reference for *this* render\n  //only re-renders on new ref. without useRef and useMemo, a new handsFree gets created on every render\n\n  const handsFree = useMemo(() => new HandsFree({\n    hands: {\n      enabled: true,\n      maxNumHands: 2\n    }\n  }), [ref]);\n  handsFree.enablePlugins('browser'); // handsFree.plugin.palmPointers.enable()\n  // handsFree.plugin.palmPointers.speed = {x: 2, y: 2}\n\n  handsFree.useGesture({\n    \"name\": \"horns\",\n    \"algorithm\": \"fingerpose\",\n    \"models\": \"hands\",\n    \"confidence\": 8,\n    \"description\": [[\"addCurl\", \"Thumb\", \"NoCurl\", 1], [\"addCurl\", \"Thumb\", \"HalfCurl\", 0.16666666666666666], [\"addDirection\", \"Thumb\", \"DiagonalUpRight\", 1], [\"addDirection\", \"Thumb\", \"VerticalUp\", 0.08333333333333333], [\"addDirection\", \"Thumb\", \"DiagonalUpLeft\", 0.6666666666666666], [\"addCurl\", \"Index\", \"NoCurl\", 1], [\"addCurl\", \"Index\", \"HalfCurl\", 0.05], [\"addDirection\", \"Index\", \"DiagonalUpRight\", 0.8181818181818182], [\"addDirection\", \"Index\", \"VerticalUp\", 0.09090909090909091], [\"addDirection\", \"Index\", \"DiagonalUpLeft\", 1], [\"addCurl\", \"Middle\", \"FullCurl\", 1], [\"addDirection\", \"Middle\", \"VerticalUp\", 0.6], [\"addDirection\", \"Middle\", \"HorizontalRight\", 0.1], [\"addDirection\", \"Middle\", \"DiagonalUpRight\", 0.4], [\"addDirection\", \"Middle\", \"DiagonalUpLeft\", 1], [\"addCurl\", \"Ring\", \"FullCurl\", 1], [\"addCurl\", \"Ring\", \"HalfCurl\", 0.05], [\"addDirection\", \"Ring\", \"DiagonalUpRight\", 1], [\"addDirection\", \"Ring\", \"VerticalUp\", 0.5], [\"addDirection\", \"Ring\", \"DiagonalUpLeft\", 0.6], [\"addCurl\", \"Pinky\", \"NoCurl\", 1], [\"addDirection\", \"Pinky\", \"VerticalUp\", 1], [\"addDirection\", \"Pinky\", \"DiagonalUpLeft\", 0.05], [\"setWeight\", \"Index\", 2], [\"setWeight\", \"Pinky\", 2]],\n    \"enabled\": true\n  }); //only runs on component mount & dismount\n\n  useEffect(() => {\n    console.log(ref);\n\n    if (ref && ref.current) {\n      handsFree.start(() => {\n        handsFree.pause();\n      }); //initializes loop but pauses it instantly\n    } // console.log(handsFree.pause);\n    //stop webcam on unmount\n\n\n    return () => handsFree.stop();\n  }, []);\n\n  const handleClick = e => {\n    e.preventDefault();\n\n    if (!props.enabled) {\n      handsFree.unpause();\n      props.setEnabled(true);\n      console.log(handsFree.isLooping);\n    } else {\n      handsFree.pause();\n      console.log(handsFree.isLooping);\n      props.setEnabled(false);\n    }\n  }; // useEffect(() => {\n  //\n  // }, []);\n  // all the magic happens here\n\n\n  if (props.enabled) {\n    // Maps handsfree pincher events to\n    const eventMap = {\n      start: 'mousedown',\n      held: 'mousemove',\n      released: 'mouseup'\n    };\n    handsFree.use(\"gestureClick\", data => {\n      if (!data.hands || !data.hands.pointer || !data.hands.pinchState) return; // if (!data.hands.pointer[0].isVisible) return;\n      // // console.log(e.hands.pointer[0].isVisible? e.hands.pointer[0] : null);\n      // if (data.hands.gesture[0] && data.hands.gesture[0][\"name\"] === \"horns\") { //on \"horns,\" mouse click at LH palm pointer\n      //   console.log(data.hands);\n      //   // console.log(data.hands.pointer[0].x, data.hands.pointer[0].y);\n      //   // on event, create a new mouseclick event at position of left palm\n      //   new MouseEvent(\"click\", {clientX: data.hands.pointer[0].x, clientY: data.hands.pointer[0].y});\n      // }\n\n      const hands = data.hands;\n      hands.multiHandLandmarks.forEach((landmarks, n) => {\n        const pointer = hands.pointer[n]; //x, y, isVisible\n\n        const pinchState = hands.pinchState[n] ? hands.pinchState[n][0] : ''; //start, held, released\n        // const curPinch = hands.curPinch[n]?hands.curPinch[n][0]:{x:0, y:0}; //x, y\n        // const origPinch = hands.origPinch[n]?hands.origPinch[n][0]:{x:0, y:0} //x, y\n\n        if (pointer.isVisible && pinchState) {\n          const mappedState = eventMap[pinchState];\n          const adjustedY = pointer.y < 300 ? pointer.y - 200 / pointer.y : pointer.y;\n          const $el = document.elementFromPoint(pointer.x, adjustedY);\n          console.log(pointer.x, pointer.y, adjustedY);\n\n          const dispatch = () => console.log(\"click\"); // console.log(mappedState, pointer.x, pointer.y)\n          // console.log($el)\n\n\n          if ($el && $el.click) {\n            $el.click();\n          }\n        } //   if ($el) {\n        //     const mouseEvent = () => new MouseEvent(mappedState, {\n        //       view: window,\n        //       button: 0,\n        //       bubbles: true,\n        //       cancelable: true,\n        //       clientX: pointer.x,\n        //       clientY: pointer.y,\n        //       // Only used when the mouse is captured in full screen mode\n        //       // movementX: pointer.x - origPinch.x,\n        //       // movementY: pointer.y - origPinch.y\n        //     })\n        //\n        //   }\n        //\n        // }\n        // Use the correct hand index\n        // if (n < 2) {\n        // const hand = hands.multiHandedness[n].label === 'Right' ? 0 : 1\n        // } else {\n        //   const hand = hands.multiHandedness[n].label === 'Right' ? 2 : 3\n        // }\n        // // Dispatch events\n        // const evnt = pointer?.pinchState?.[n]?.[0];\n        // console.log(evnt);\n        // // if (!evnt || !pointer.isVisible) return;\n        // // // Get the event and element to send events to\n        // // const mappedEvnt = eventMap[evnt]\n        // // const $el = document.elementFromPoint(pointer.x, pointer.y)\n        // //\n        // // // Dispatch the event\n        // // if ($el) {\n        // //   $el.dispatchEvent(\n        // //     new MouseEvent(mappedEvnt, {\n        // //       view: window,\n        // //       button: 0,\n        // //       bubbles: true,\n        // //       cancelable: true,\n        // //       clientX: pointer.x,\n        // //       clientY: pointer.y,\n        // //       // Only used when the mouse is captured in full screen mode\n        // //       movementX: pointer.x - hands.origPinch[n][0].x,\n        // //       movementY: pointer.y - hands.origPinch[n][0].y\n        // //     })\n        // //   )\n        // // }\n\n      });\n    });\n  }\n  /*\n   - disable pinch scroll\n  - if thumb and index pinched on any hand, dispatch click event\n   pinch start:\n  - create click event starting w current point\n  - elementFromPoint(curPinch[1][0].x, curPinch[1][0].y)\n   pinch held:\n  - create mouse move events\n   pinch released:\n  - create mouse up event\n   data.hands.pinchState[0][0] -> gets state of LH index finger\n  can be either \"start\", \"held\", \"released\"\n  handsFree.on(handsfree-finger-pinched-start-0)\n  handsFree.on(handsfree-finger-pinched-held-0)\n  handsFree.on(handsfree-finger-pinched-released-0)\n    */\n\n  /*\n    TODO:\n    - draw palm Positions\n      - shrink for click\n      - something for drag (oblong?)\n    - add \"click\" plugin\n      - create plugin for \"horns\" hand gesture\n      [\n    {\n        \"name\": \"horns\",\n        \"confidence\": 8.083333333333334,\n        \"pose\": [\n            [\n                \"Thumb\",\n                \"No Curl\",\n                \"Diagonal Up Left\"\n            ],\n            [\n                \"Index\",\n                \"No Curl\",\n                \"Diagonal Up Left\"\n            ],\n            [\n                \"Middle\",\n                \"Half Curl\",\n                \"Diagonal Up Left\"\n            ],\n            [\n                \"Ring\",\n                \"Half Curl\",\n                \"Diagonal Up Left\"\n            ],\n            [\n                \"Pinky\",\n                \"No Curl\",\n                \"Vertical Up\"\n            ]\n        ]\n    },\n    {\n        \"name\": \"\",\n        \"confidence\": 0,\n        \"pose\": [\n            [\n                \"Thumb\",\n                \"Half Curl\",\n                \"Horizontal Left\"\n            ],\n            [\n                \"Index\",\n                \"Half Curl\",\n                \"Diagonal Up Left\"\n            ],\n            [\n                \"Middle\",\n                \"Half Curl\",\n                \"Diagonal Down Left\"\n            ],\n            [\n                \"Ring\",\n                \"Half Curl\",\n                \"Diagonal Down Right\"\n            ],\n            [\n                \"Pinky\",\n                \"Half Curl\",\n                \"Vertical Down\"\n            ]\n        ]\n    },\n    null,\n    null\n  ]\n      - on horns, new MouseEvent\n    - add \"pause\" plugin\n      - on fist, pause/stop handsFree\n       {props.enabled &&\n        <div>\n        </div>\n      }\n  */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: props.enabled ? \"disable hands\" : \"enable hands\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Hands, \"lu/8/8W9pn/hx8Q3h7fW1eSBxbQ=\", false, function () {\n  return [handsFree.useGesture];\n});\n\n_c = Hands;\n;\nexport default Hands;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hands\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/chronovis/src/components/Hands.js"],"names":["React","useMemo","useEffect","useRef","HandsFree","initHandsFree","Hands","props","ref","handsFree","hands","enabled","maxNumHands","enablePlugins","useGesture","console","log","current","start","pause","stop","handleClick","e","preventDefault","unpause","setEnabled","isLooping","eventMap","held","released","use","data","pointer","pinchState","multiHandLandmarks","forEach","landmarks","n","isVisible","mappedState","adjustedY","y","$el","document","elementFromPoint","x","dispatch","click"],"mappings":"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AAO,CAACa,CAAlC,EAAqCL,SAArC,CAAZ;AACAzB,UAAAA,OAAO,CAACC,GAAR,CAAYgB,OAAO,CAACa,CAApB,EAAuBb,OAAO,CAACS,CAA/B,EAAkCD,SAAlC;;AACA,gBAAMM,QAAQ,GAAG,MAAM/B,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAvB,CALmC,CAMnC;AACA;;;AACA,cAAI0B,GAAG,IAAIA,GAAG,CAACK,KAAf,EAAsB;AACpBL,YAAAA,GAAG,CAACK,KAAJ;AACD;AACF,SAjBgD,CAkBjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,OAlED;AAmED,KAhFD;AAiFD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIE,sBACE;AAAK,IAAA,GAAG,EAAEvC,GAAV;AAAA,2BAEE;AAAQ,MAAA,OAAO,EAAEa,WAAjB;AAAA,gBACGd,KAAK,CAACI,OAAN,GAAc,eAAd,GAA8B;AADjC;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAzZQL,K;UAcPG,SAAS,CAACK,U;;;KAdHR,K;AAyZR;AAED,eAAeA,KAAf","sourcesContent":["import React, {useMemo, useEffect, useRef} from 'react';\nimport HandsFree from 'handsfree';\n// import EventDispatcher from 'react-event-dispatcher';\n// import hands from '@mediapipe/hands';\n\n//https://handsfree.js.org\n\nfunction initHandsFree() {\n  //\n\n}\n\nfunction Hands(props) {\n  //init\n  const ref = useRef(); //creates reference for *this* render\n  //only re-renders on new ref. without useRef and useMemo, a new handsFree gets created on every render\n  const handsFree = useMemo(() =>\n    new HandsFree({\n      hands:{\n        enabled: true,\n        maxNumHands: 2\n      }\n    }), [ref]);\n  handsFree.enablePlugins('browser');\n  // handsFree.plugin.palmPointers.enable()\n  // handsFree.plugin.palmPointers.speed = {x: 2, y: 2}\n  handsFree.useGesture({\n    \"name\": \"horns\",\n    \"algorithm\": \"fingerpose\",\n    \"models\": \"hands\",\n    \"confidence\": 8,\n    \"description\": [\n      [\n        \"addCurl\",\n        \"Thumb\",\n        \"NoCurl\",\n        1\n      ],\n      [\n        \"addCurl\",\n        \"Thumb\",\n        \"HalfCurl\",\n        0.16666666666666666\n      ],\n      [\n        \"addDirection\",\n        \"Thumb\",\n        \"DiagonalUpRight\",\n        1\n      ],\n      [\n        \"addDirection\",\n        \"Thumb\",\n        \"VerticalUp\",\n        0.08333333333333333\n      ],\n      [\n        \"addDirection\",\n        \"Thumb\",\n        \"DiagonalUpLeft\",\n        0.6666666666666666\n      ],\n      [\n        \"addCurl\",\n        \"Index\",\n        \"NoCurl\",\n        1\n      ],\n      [\n        \"addCurl\",\n        \"Index\",\n        \"HalfCurl\",\n        0.05\n      ],\n      [\n        \"addDirection\",\n        \"Index\",\n        \"DiagonalUpRight\",\n        0.8181818181818182\n      ],\n      [\n        \"addDirection\",\n        \"Index\",\n        \"VerticalUp\",\n        0.09090909090909091\n      ],\n      [\n        \"addDirection\",\n        \"Index\",\n        \"DiagonalUpLeft\",\n        1\n      ],\n      [\n        \"addCurl\",\n        \"Middle\",\n        \"FullCurl\",\n        1\n      ],\n      [\n        \"addDirection\",\n        \"Middle\",\n        \"VerticalUp\",\n        0.6\n      ],\n      [\n        \"addDirection\",\n        \"Middle\",\n        \"HorizontalRight\",\n        0.1\n      ],\n      [\n        \"addDirection\",\n        \"Middle\",\n        \"DiagonalUpRight\",\n        0.4\n      ],\n      [\n        \"addDirection\",\n        \"Middle\",\n        \"DiagonalUpLeft\",\n        1\n      ],\n      [\n        \"addCurl\",\n        \"Ring\",\n        \"FullCurl\",\n        1\n      ],\n      [\n        \"addCurl\",\n        \"Ring\",\n        \"HalfCurl\",\n        0.05\n      ],\n      [\n        \"addDirection\",\n        \"Ring\",\n        \"DiagonalUpRight\",\n        1\n      ],\n      [\n        \"addDirection\",\n        \"Ring\",\n        \"VerticalUp\",\n        0.5\n      ],\n      [\n        \"addDirection\",\n        \"Ring\",\n        \"DiagonalUpLeft\",\n        0.6\n      ],\n      [\n        \"addCurl\",\n        \"Pinky\",\n        \"NoCurl\",\n        1\n      ],\n      [\n        \"addDirection\",\n        \"Pinky\",\n        \"VerticalUp\",\n        1\n      ],\n      [\n        \"addDirection\",\n        \"Pinky\",\n        \"DiagonalUpLeft\",\n        0.05\n      ],\n      [\n        \"setWeight\",\n        \"Index\",\n        2\n      ],\n      [\n        \"setWeight\",\n        \"Pinky\",\n        2\n      ]\n    ],\n    \"enabled\": true\n  })\n\n//only runs on component mount & dismount\n  useEffect(() => {\n    console.log(ref);\n    if (ref && ref.current) {\n      handsFree.start(()=>{handsFree.pause()}); //initializes loop but pauses it instantly\n    }\n    // console.log(handsFree.pause);\n    //stop webcam on unmount\n    return () => handsFree.stop();\n  }, []);\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    if (!props.enabled){\n      handsFree.unpause();\n      props.setEnabled(true);\n      console.log(handsFree.isLooping);\n\n    } else {\n      handsFree.pause()\n      console.log(handsFree.isLooping);\n      props.setEnabled(false);\n    }\n  }\n\n  // useEffect(() => {\n  //\n  // }, []);\n\n  // all the magic happens here\n  if (props.enabled) {\n    // Maps handsfree pincher events to\n    const eventMap =  {\n      start: 'mousedown',\n      held: 'mousemove',\n      released: 'mouseup'\n    }\n    handsFree.use(\"gestureClick\", (data) => {\n      if (!data.hands || !data.hands.pointer || !data.hands.pinchState) return;\n      // if (!data.hands.pointer[0].isVisible) return;\n      // // console.log(e.hands.pointer[0].isVisible? e.hands.pointer[0] : null);\n      // if (data.hands.gesture[0] && data.hands.gesture[0][\"name\"] === \"horns\") { //on \"horns,\" mouse click at LH palm pointer\n      //   console.log(data.hands);\n      //   // console.log(data.hands.pointer[0].x, data.hands.pointer[0].y);\n      //   // on event, create a new mouseclick event at position of left palm\n      //   new MouseEvent(\"click\", {clientX: data.hands.pointer[0].x, clientY: data.hands.pointer[0].y});\n      // }\n\n      const hands = data.hands;\n\n      hands.multiHandLandmarks.forEach((landmarks, n) => {\n        const pointer = hands.pointer[n] //x, y, isVisible\n        const pinchState = hands.pinchState[n]?hands.pinchState[n][0]:''; //start, held, released\n        // const curPinch = hands.curPinch[n]?hands.curPinch[n][0]:{x:0, y:0}; //x, y\n        // const origPinch = hands.origPinch[n]?hands.origPinch[n][0]:{x:0, y:0} //x, y\n\n        if (pointer.isVisible && pinchState) {\n          const mappedState = eventMap[pinchState];\n          const adjustedY = pointer.y<300?pointer.y-(200/pointer.y):pointer.y;\n          const $el = document.elementFromPoint(pointer.x, adjustedY)\n          console.log(pointer.x, pointer.y, adjustedY)\n          const dispatch = () => console.log(\"click\");\n          // console.log(mappedState, pointer.x, pointer.y)\n          // console.log($el)\n          if ($el && $el.click) {\n            $el.click()\n          }\n        }\n        //   if ($el) {\n        //     const mouseEvent = () => new MouseEvent(mappedState, {\n        //       view: window,\n        //       button: 0,\n        //       bubbles: true,\n        //       cancelable: true,\n        //       clientX: pointer.x,\n        //       clientY: pointer.y,\n        //       // Only used when the mouse is captured in full screen mode\n        //       // movementX: pointer.x - origPinch.x,\n        //       // movementY: pointer.y - origPinch.y\n        //     })\n        //\n        //   }\n        //\n        // }\n\n        // Use the correct hand index\n        // if (n < 2) {\n        // const hand = hands.multiHandedness[n].label === 'Right' ? 0 : 1\n        // } else {\n        //   const hand = hands.multiHandedness[n].label === 'Right' ? 2 : 3\n        // }\n\n        // // Dispatch events\n        // const evnt = pointer?.pinchState?.[n]?.[0];\n        // console.log(evnt);\n        // // if (!evnt || !pointer.isVisible) return;\n        // // // Get the event and element to send events to\n        // // const mappedEvnt = eventMap[evnt]\n        // // const $el = document.elementFromPoint(pointer.x, pointer.y)\n        // //\n        // // // Dispatch the event\n        // // if ($el) {\n        // //   $el.dispatchEvent(\n        // //     new MouseEvent(mappedEvnt, {\n        // //       view: window,\n        // //       button: 0,\n        // //       bubbles: true,\n        // //       cancelable: true,\n        // //       clientX: pointer.x,\n        // //       clientY: pointer.y,\n        // //       // Only used when the mouse is captured in full screen mode\n        // //       movementX: pointer.x - hands.origPinch[n][0].x,\n        // //       movementY: pointer.y - hands.origPinch[n][0].y\n        // //     })\n        // //   )\n        // // }\n      })\n    })\n  }\n\n  /*\n\n  - disable pinch scroll\n  - if thumb and index pinched on any hand, dispatch click event\n\n  pinch start:\n  - create click event starting w current point\n  - elementFromPoint(curPinch[1][0].x, curPinch[1][0].y)\n\n  pinch held:\n  - create mouse move events\n\n  pinch released:\n  - create mouse up event\n\n  data.hands.pinchState[0][0] -> gets state of LH index finger\n  can be either \"start\", \"held\", \"released\"\n  handsFree.on(handsfree-finger-pinched-start-0)\n  handsFree.on(handsfree-finger-pinched-held-0)\n  handsFree.on(handsfree-finger-pinched-released-0)\n\n\n  */\n\n\n  /*\n    TODO:\n    - draw palm Positions\n      - shrink for click\n      - something for drag (oblong?)\n    - add \"click\" plugin\n      - create plugin for \"horns\" hand gesture\n      [\n    {\n        \"name\": \"horns\",\n        \"confidence\": 8.083333333333334,\n        \"pose\": [\n            [\n                \"Thumb\",\n                \"No Curl\",\n                \"Diagonal Up Left\"\n            ],\n            [\n                \"Index\",\n                \"No Curl\",\n                \"Diagonal Up Left\"\n            ],\n            [\n                \"Middle\",\n                \"Half Curl\",\n                \"Diagonal Up Left\"\n            ],\n            [\n                \"Ring\",\n                \"Half Curl\",\n                \"Diagonal Up Left\"\n            ],\n            [\n                \"Pinky\",\n                \"No Curl\",\n                \"Vertical Up\"\n            ]\n        ]\n    },\n    {\n        \"name\": \"\",\n        \"confidence\": 0,\n        \"pose\": [\n            [\n                \"Thumb\",\n                \"Half Curl\",\n                \"Horizontal Left\"\n            ],\n            [\n                \"Index\",\n                \"Half Curl\",\n                \"Diagonal Up Left\"\n            ],\n            [\n                \"Middle\",\n                \"Half Curl\",\n                \"Diagonal Down Left\"\n            ],\n            [\n                \"Ring\",\n                \"Half Curl\",\n                \"Diagonal Down Right\"\n            ],\n            [\n                \"Pinky\",\n                \"Half Curl\",\n                \"Vertical Down\"\n            ]\n        ]\n    },\n    null,\n    null\n]\n      - on horns, new MouseEvent\n    - add \"pause\" plugin\n      - on fist, pause/stop handsFree\n\n      {props.enabled &&\n        <div>\n        </div>\n      }\n  */\n\n\n  return (\n    <div ref={ref}>\n      {/*<HandsButton handleClick={handleClick} />*/}\n      <button onClick={handleClick}>\n        {props.enabled?\"disable hands\":\"enable hands\"}\n      </button>\n    </div>\n  )\n};\n\nexport default Hands;\n"]},"metadata":{},"sourceType":"module"}