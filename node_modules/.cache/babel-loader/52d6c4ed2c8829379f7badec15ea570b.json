{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/chronovis/src/components/Hands.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useMemo, useEffect, useRef, useCallback } from 'react';\nimport HandsFree from 'handsfree'; // import EventDispatcher from 'react-event-dispatcher';\n// import hands from '@mediapipe/hands';\n//https://handsfree.js.org\n//IMPORTANT: handsfree.js source code has been edited to turn pinchScroll into clicker\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Hands(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  //init\n  const ref = useRef(); //creates reference for *this* render\n  //only re-renders on new ref. without useRef and useMemo, a new handsFree gets created on every render\n\n  const handsFree = useMemo(() => new HandsFree({\n    hands: {\n      enabled: true,\n      maxNumHands: 1\n    }\n  }), [ref]);\n  handsFree.enablePlugins('browser'); //handsFree.plugin.palmPointers.offset = {x: -200, y: -200}\n  //only runs on component mount & dismount\n\n  useEffect(() => {\n    if (ref && ref.current) {\n      handsFree.start(() => {\n        handsFree.pause();\n      }); //initializes loop but pauses it instantly\n\n      ref.current.focus();\n    } // console.log(handsFree.pause);\n    //stop webcam on unmount\n\n\n    return () => handsFree.stop();\n  }, []); // const handleClick = (e) => {\n  //   e.preventDefault();\n  //   if (!props.enabled){\n  //     handsFree.unpause();\n  //     props.setEnabled(true);\n  //     console.log(handsFree.isLooping);\n  //\n  //   } else {\n  //     handsFree.pause()\n  //     console.log(handsFree.isLooping);\n  //     props.setEnabled(false);\n  //   }\n  // }\n\n  const KeyDetector = props => {\n    _s();\n\n    const keyPress = e => {\n      console.log(e);\n    }; // const keyPress = useCallback((event) => {\n    //   if (event.key === 'AltLeft') {\n    //     console.log(event.key);\n    //     if (!props.enabled){\n    //       handsFree.unpause();\n    //       props.setEnabled(true);\n    //       console.log(handsFree.isLooping);\n    //\n    //     } else {\n    //       handsFree.pause()\n    //       console.log(handsFree.isLooping);\n    //       props.setEnabled(false);\n    //     }\n    //   }\n    // }, []);\n    //unsubscribe to avoid memory leaks\n\n\n    useEffect(() => {\n      document.addEventListener(\"keydown\", keyPress, true);\n      return () => {\n        document.removeEventListener(\"keydown\", keyPress, true);\n      };\n    }, []);\n    return /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  };\n  /*\n   - disable pinch scroll\n  - if thumb and index pinched on any hand, dispatch click event\n   pinch start:\n  - create click event starting w current point\n  - elementFromPoint(curPinch[1][0].x, curPinch[1][0].y)\n   pinch held:\n  - create mouse move events\n   pinch released:\n  - create mouse up event\n   data.hands.pinchState[0][0] -> gets state of LH index finger\n  can be either \"start\", \"held\", \"released\"\n  handsFree.on(handsfree-finger-pinched-start-0)\n  handsFree.on(handsfree-finger-pinched-held-0)\n  handsFree.on(handsfree-finger-pinched-released-0)\n    */\n\n  /*\n    TODO:\n    - draw palm Positions\n      - shrink for click\n      - something for drag (oblong?)\n    - add \"click\" plugin\n      - create plugin for \"horns\" hand gesture\n      - on horns, new MouseEvent\n    - add \"pause\" plugin\n      - on fist, pause/stop handsFree\n   */\n\n\n  _s(KeyDetector, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    children: /*#__PURE__*/_jsxDEV(KeyDetector, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Hands, \"sEGCOFuwqOI4bFOBP+jy4xyjtRY=\");\n\n_c = Hands;\n;\nexport default Hands;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hands\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/chronovis/src/components/Hands.js"],"names":["React","useMemo","useEffect","useRef","useCallback","HandsFree","Hands","props","ref","handsFree","hands","enabled","maxNumHands","enablePlugins","current","start","pause","focus","stop","KeyDetector","keyPress","e","console","log","document","addEventListener","removeEventListener"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,OAAf,EAAwBC,SAAxB,EAAmCC,MAAnC,EAA2CC,WAA3C,QAA6D,OAA7D;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CACA;AACA;AAEA;AACA;;;;AAGA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AAAA;;AACpB;AACA,QAAMC,GAAG,GAAGL,MAAM,EAAlB,CAFoB,CAEE;AACtB;;AACA,QAAMM,SAAS,GAAGR,OAAO,CAAC,MACxB,IAAII,SAAJ,CAAc;AACZK,IAAAA,KAAK,EAAC;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,WAAW,EAAE;AAFT;AADM,GAAd,CADuB,EAMnB,CAACJ,GAAD,CANmB,CAAzB;AAOAC,EAAAA,SAAS,CAACI,aAAV,CAAwB,SAAxB,EAXoB,CAYpB;AAEF;;AACEX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,GAAG,IAAIA,GAAG,CAACM,OAAf,EAAwB;AACtBL,MAAAA,SAAS,CAACM,KAAV,CAAgB,MAAI;AAACN,QAAAA,SAAS,CAACO,KAAV;AAAkB,OAAvC,EADsB,CACoB;;AAC1CR,MAAAA,GAAG,CAACM,OAAJ,CAAYG,KAAZ;AACD,KAJa,CAKd;AACA;;;AACA,WAAO,MAAMR,SAAS,CAACS,IAAV,EAAb;AACD,GARQ,EAQN,EARM,CAAT,CAfoB,CAyBpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,WAAW,GAAIZ,KAAD,IAAW;AAAA;;AAC7B,UAAMa,QAAQ,GAAIC,CAAD,IAAO;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,KAFD,CAD6B,CAI7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACAnB,IAAAA,SAAS,CAAC,MAAM;AACdsB,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCL,QAArC,EAA+C,IAA/C;AAEA,aAAO,MAAM;AACXI,QAAAA,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCN,QAAxC,EAAkD,IAAlD;AACD,OAFD;AAGD,KANQ,EAMN,EANM,CAAT;AAQA,wBACE;AAAA;AAAA;AAAA;AAAA,YADF;AAGD,GAhCD;AAiCA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA3GsB,KAuCdD,WAvCc;;AA+GpB,sBACE;AAAK,IAAA,GAAG,EAAEX,GAAV;AAAA,2BAME,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;IAzHQF,K;;KAAAA,K;AAyHR;AAED,eAAeA,KAAf","sourcesContent":["import React, {useMemo, useEffect, useRef, useCallback} from 'react';\nimport HandsFree from 'handsfree';\n// import EventDispatcher from 'react-event-dispatcher';\n// import hands from '@mediapipe/hands';\n\n//https://handsfree.js.org\n//IMPORTANT: handsfree.js source code has been edited to turn pinchScroll into clicker\n\n\nfunction Hands(props) {\n  //init\n  const ref = useRef(); //creates reference for *this* render\n  //only re-renders on new ref. without useRef and useMemo, a new handsFree gets created on every render\n  const handsFree = useMemo(() =>\n    new HandsFree({\n      hands:{\n        enabled: true,\n        maxNumHands: 1\n      }\n    }), [ref]);\n  handsFree.enablePlugins('browser');\n  //handsFree.plugin.palmPointers.offset = {x: -200, y: -200}\n\n//only runs on component mount & dismount\n  useEffect(() => {\n    if (ref && ref.current) {\n      handsFree.start(()=>{handsFree.pause()}); //initializes loop but pauses it instantly\n      ref.current.focus();\n    }\n    // console.log(handsFree.pause);\n    //stop webcam on unmount\n    return () => handsFree.stop();\n  }, []);\n\n  // const handleClick = (e) => {\n  //   e.preventDefault();\n  //   if (!props.enabled){\n  //     handsFree.unpause();\n  //     props.setEnabled(true);\n  //     console.log(handsFree.isLooping);\n  //\n  //   } else {\n  //     handsFree.pause()\n  //     console.log(handsFree.isLooping);\n  //     props.setEnabled(false);\n  //   }\n  // }\n\n  const KeyDetector = (props) => {\n    const keyPress = (e) => {\n      console.log(e);\n    }\n    // const keyPress = useCallback((event) => {\n    //   if (event.key === 'AltLeft') {\n    //     console.log(event.key);\n    //     if (!props.enabled){\n    //       handsFree.unpause();\n    //       props.setEnabled(true);\n    //       console.log(handsFree.isLooping);\n    //\n    //     } else {\n    //       handsFree.pause()\n    //       console.log(handsFree.isLooping);\n    //       props.setEnabled(false);\n    //     }\n    //   }\n    // }, []);\n\n    //unsubscribe to avoid memory leaks\n    useEffect(() => {\n      document.addEventListener(\"keydown\", keyPress, true);\n\n      return () => {\n        document.removeEventListener(\"keydown\", keyPress, true);\n      };\n    }, []);\n\n    return (\n      <input />\n    )\n  };\n  /*\n\n  - disable pinch scroll\n  - if thumb and index pinched on any hand, dispatch click event\n\n  pinch start:\n  - create click event starting w current point\n  - elementFromPoint(curPinch[1][0].x, curPinch[1][0].y)\n\n  pinch held:\n  - create mouse move events\n\n  pinch released:\n  - create mouse up event\n\n  data.hands.pinchState[0][0] -> gets state of LH index finger\n  can be either \"start\", \"held\", \"released\"\n  handsFree.on(handsfree-finger-pinched-start-0)\n  handsFree.on(handsfree-finger-pinched-held-0)\n  handsFree.on(handsfree-finger-pinched-released-0)\n\n\n  */\n\n\n  /*\n    TODO:\n    - draw palm Positions\n      - shrink for click\n      - something for drag (oblong?)\n    - add \"click\" plugin\n      - create plugin for \"horns\" hand gesture\n      - on horns, new MouseEvent\n    - add \"pause\" plugin\n      - on fist, pause/stop handsFree\n\n  */\n\n\n  return (\n    <div ref={ref}>\n      {/*\n      <button onClick={handleClick}>\n        {props.enabled?\"disable hands\":\"enable hands\"}\n      </button>\n      */}\n      <KeyDetector/>\n    </div>\n  )\n};\n\nexport default Hands;\n"]},"metadata":{},"sourceType":"module"}