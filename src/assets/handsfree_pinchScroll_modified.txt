/**
   * Scrolls the page vertically by closing hand
   */
  var pluginPinchScroll = {
    models: 'hands',
    tags: ['browser'],
    enabled: false,

    config: {
      // How often in milliseconds to trigger clicks
      throttle: 50,

      // Max number of frames to keep down
      maxMouseDownedFrames: 1,

      // // Morphs to watch for and their required confidences
      // morphs: {
      //   0: 0.25,
      //   1: 0.25
      // }
    },

    // Number of frames mouse has been downed
    mouseDowned: 0,
    // Is the mouse up?
    mouseUp: false,
    // // Whether one of the morph confidences have been met
    // thresholdMet: false,

    // The last held {x, y}, used to calculate move delta
    lastHeld: {x: 0, y: 0},
    // Original target under mousedown
    $origTarget: null,

    /**
     * Detect click state and trigger a real click event
     */
     onFrame ({hands}) {
       // Detect if the threshold for clicking is met with specific morphs
       // this.thresholdMet = false
       // let event = ''
       // Object.keys(this.config.morphs).forEach((key) => {
       //   const morph = +this.config.morphs[key]
       //   if (morph > 0 && weboji.morphs[key] >= morph) this.thresholdMet = true
       // })

       setTimeout(() => {
         if (!hands.pointer) return
         const pointer = hands.pointer[0]

         // @fixme Get rid of n > origPinch.length
         if (!pointer.isVisible) return
         const pinchState = hands.pinchState[0][0]
         let mouseEventState = ''

         if (!pinchState) { //if no pinchState, release
           this.mouseUp = this.mouseDowned
           this.mouseDowned = 0
           document.body.classList.remove('handsfree-clicked')
         } else { //otherwise, hold
           this.mouseDowned++
           document.body.classList.add('handsfree-clicked')
         }

         // Set type of mouse event
         if (
           this.mouseDowned > 0 &&
           this.mouseDowned <= this.config.maxMouseDownedFrames
         )
           mouseEventState = 'mousedown'
         else if (this.mouseDowned > this.config.maxMouseDownedFrames)
           mouseEventState = 'mousedrag'
         else if (this.mouseUp)
           mouseEventState = 'mouseup'
         else
           mouseEventState = 'mousemove'

         // Actually click something (or focus it)
         const $el = document.elementFromPoint(pointer.x, pointer.y)
         if ($el && mouseEventState === 'mousedown') {
           this.$origTarget = $el
         }

         if ($el) {
           const eventOpts = {
             view: window,
             button: 0,
             bubbles: true,
             cancelable: true,
             clientX: pointer.x,
             clientY: pointer.y,
             // Only used when the mouse is captured in full screen mode
             movementX: pointer.x - this.lastHeld.x,
             movementY: pointer.y - this.lastHeld.y
           }

           $el.dispatchEvent(new MouseEvent(mouseEventState, eventOpts))

           // Focus
           if (mouseEventState === 'mousedown' && ['INPUT', 'TEXTAREA', 'BUTTON', 'A'].includes($el.nodeName))
             $el.focus()

           // Click
           if (mouseEventState === 'mouseup' && $el === this.$origTarget) {
             $el.dispatchEvent(new MouseEvent('click', eventOpts))
           }

           pointer.$target = $el
         }

         this.lastHeld = pointer

       })
     }
  };